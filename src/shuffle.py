import random

def naive_shuffle(seq: str) -> str:
    """
    Returns a new string that is a randomly shuffled version of the input sequence.
    
    This method shuffles the sequence at the level of individual nucleotides.
    
    Args:
        seq (str): The input nucleotide sequence.
    
    Returns:
        str: The shuffled sequence.
    """
    seq_list = list(seq)
    random.shuffle(seq_list)
    return ''.join(seq_list)

def di_pair_shuffle(seq: str) -> str:
    """
    Returns a new sequence generated by shuffling the input sequence in dinucleotide (di-pair) blocks.
    
    For an even-length sequence, the sequence is partitioned into dinucleotide blocks 
    (e.g., "ACGT" -> ["AC", "GT"]) and then shuffled.
    
    For an odd-length sequence, the sequence is partitioned into dinucleotide blocks, 
    and the last (single) nucleotide is treated as an independent block. All blocks 
    (pairs and the single leftover) are then shuffled randomly.
    
    Args:
        seq (str): The input nucleotide sequence.
    
    Returns:
        str: The dinucleotide-shuffled sequence.
    """
    # Partition the sequence into dinucleotide blocks.
    pairs = [seq[i:i+2] for i in range(0, len(seq) - 1, 2)]
    # Determine if there's a remainder (i.e., sequence has odd length)
    remainder = seq[-1] if len(seq) % 2 != 0 else None
    # Build the list of blocks.
    if remainder is not None:
        blocks = pairs + [remainder]
    else:
        blocks = pairs
    # Randomly shuffle all blocks.
    random.shuffle(blocks)
    # Reassemble and return the shuffled sequence.
    return ''.join(blocks)

def shuffle_sequence(seq: str, method: str = "naive") -> str:
    """
    Shuffles the given sequence using the specified method.
    
    Args:
        seq (str): The input nucleotide sequence.
        method (str): The shuffling method to use. Options are:
                      - "naive": Shuffle individual nucleotides.
                      - "di-pair": Shuffle dinucleotide blocks (with odd-length remainders treated as independent blocks).
    
    Returns:
        str: The shuffled sequence.
    
    Raises:
        ValueError: If an unknown shuffling method is specified.
    """
    if method == "naive":
        return naive_shuffle(seq)
    elif method == "di-pair":
        return di_pair_shuffle(seq)
    else:
        raise ValueError(f"Unknown shuffling method: {method}")

# For demonstration or manual testing purposes.
if __name__ == "__main__":
    sample_seq = "ACGTACGTAC"
    print("Original sequence: ", sample_seq)
    print("Naive shuffle:     ", naive_shuffle(sample_seq))
    print("Di-pair shuffle:   ", di_pair_shuffle(sample_seq))
    print("General (naive):   ", shuffle_sequence(sample_seq, method="naive"))
    print("General (di-pair): ", shuffle_sequence(sample_seq, method="di-pair"))